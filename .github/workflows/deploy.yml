name: Deploy to EC2

on:
  push:
    branches:
      - dev
      - main

jobs:
  deploy-dev:
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Java environment
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 3: Add EC2 Host to Known Hosts
      - name: Add EC2 Host to Known Hosts
        env:
          EC2_HOST: ${{ secrets.SSH_HOST_DEV }}
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts

      # Step 4: Create .env File from Secret
      - name: Create .env File
        env:
          ENV_STAGING: ${{ secrets.ENV_STAGING }}
        run: |
          echo "$ENV_STAGING" > .env

      # Step 5: Build the project
      - name: Build with Maven
        run: mvn clean install

      # Step 6: Copy jar file to EC2
      - name: Deploy JAR to EC2
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}
          EC2_HOST: ${{ secrets.SSH_HOST_DEV }}
          EC2_USER: ${{ secrets.SSH_USER }}
        run: |
          echo "${SSH_KEY}" > key.pem
          chmod 600 key.pem
          scp -i key.pem target/spring-boot-security-postgresql-0.0.1-SNAPSHOT.jar ${EC2_USER}@${EC2_HOST}:~/sy/sy.jar

      # Step 7: Restart the application on EC2
      - name: Restart Application
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}
          EC2_HOST: ${{ secrets.SSH_HOST_DEV }}
          EC2_USER: ${{ secrets.SSH_USER }}
        run: |
          ssh -i key.pem ${EC2_USER}@${EC2_HOST} << 'EOF'
          cd ~/sy
          PID=$(sudo lsof -ti:8080 || echo "")
          if [ -n "$PID" ]; then
            sudo kill -9 $PID
          fi
          nohup java -jar ./sy.jar > test.log 2>&1 &
          echo "Deployment Complete"
          EOF
  deploy-prod:
    if: github.ref == 'refs/heads/main'  # Run only on main branch or PR merge
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Java environment
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 3: Add EC2 Host to Known Hosts
      - name: Add EC2 Host to Known Hosts
        env:
          EC2_HOST: ${{ secrets.SSH_HOST_PRODUCTION }}
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts

      # Step 4: Create .env File from Secret
      - name: Create .env File
        env:
          ENV_PRODUCTION: ${{ secrets.ENV_PRODUCTION }}
        run: |
          echo "$ENV_PRODUCTION" > .env

      # Step 5: Build the project
      - name: Build with Maven
        run: mvn clean install

      # Step 6: Copy jar file to EC2
      - name: Deploy JAR to EC2
        env:
          SSH_KEY: ${{ secrets.SSH_KEY_PRODUCTION }}
          EC2_HOST: ${{ secrets.SSH_HOST_PRODUCTION }}
          EC2_USER: ${{ secrets.SSH_USER_PRODUCTION }}
        run: |
          echo "${SSH_KEY}" > key.pem
          chmod 600 key.pem
          scp -i key.pem target/spring-boot-security-postgresql-0.0.1-SNAPSHOT.jar ${EC2_USER}@${EC2_HOST}:~/sy/sy.jar

      # Step 7: Restart the application on EC2
      - name: Restart Application
        env:
          SSH_KEY: ${{ secrets.SSH_KEY_PRODUCTION }}
          EC2_HOST: ${{ secrets.SSH_HOST_PRODUCTION }}
          EC2_USER: ${{ secrets.SSH_USER_PRODUCTION }}
        run: |
          ssh -i key.pem ${EC2_USER}@${EC2_HOST} << 'EOF'
          cd ~/sy
          PID=$(sudo lsof -ti:8080 || echo "")
          if [ -n "$PID" ]; then
            sudo kill -9 $PID
          fi
          nohup java -jar ./sy.jar > test.log 2>&1 &
          echo "Deployment Complete"
          EOF